<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dancer | Steven Sun's Blog]]></title>
  <link href="http://shpeacelover.github.io/blog/categories/dancer/atom.xml" rel="self"/>
  <link href="http://shpeacelover.github.io/"/>
  <updated>2014-02-21T20:12:42+08:00</updated>
  <id>http://shpeacelover.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Random Notes on the Dancer Framework]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/23/some-random-notes-on-the-dancer-framework/"/>
    <updated>2014-01-23T11:02:30+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/23/some-random-notes-on-the-dancer-framework</id>
    <content type="html"><![CDATA[<p>I write this post to keep notes of those little knowledge snippets when I am learning Dancer, the Perl web framework.</p>

<ol>
<li><p>Templates all go into the views/ directory. Optionally, you can create a &ldquo;layout&rdquo; template which provides a consistent look and feel for all of your views.</p></li>
<li><p>If we have some code like &ldquo;&lsquo;msg&rsquo; => get_flash()&rdquo;, this means we have a msg field which displays a message to the user when an event happens like a new entry is posted, or the user logs in or out. It&rsquo;s called a &ldquo;flash&rdquo; message because we only want to display it one time, not every time the / URL is rendered.</p></li>
<li><p>The uri_for directive tells Dancer to provide a URI for that specific route. You might ask why we don&rsquo;t simply hardcode the /add URI in our application or templates. The best reason not to do that is because it removes a layer of flexibility on where to &ldquo;mount&rdquo; the web application. Although the application is coded to use the root URL / it might be better in the future to locate it under its own URL route &ndash; at that point we&rsquo;d have to go through our application and the templates and update the URLs and hope we didn&rsquo;t miss any of them. By using the uri_for Dancer method, we can easily load the application wherever we like and not have to modify the application at all.</p></li>
<li><p>We will use the format like &ldquo;insert into entries (title, text) values (?, ?)&rdquo; to be sure our application won&rsquo;t be vulnerable to SQL injection.</p></li>
<li><p>If we have some like &ldquo;any [&lsquo;get&rsquo;, &lsquo;post&rsquo;] => &lsquo;/login&rsquo; => sub {}&rdquo;, here a GET for a human browsing to the URL and a POST for the browser to submit the user&rsquo;s input to the web application.</p></li>
<li><p>session->destroy; is Dancer&rsquo;s way to remove a stored session.</p></li>
<li><p>If we have some code like &ldquo;set layout => &lsquo;main&rsquo;&rdquo;, what this tells Dancer&rsquo;s template engine is that it should look for a file called main.tt in myapp/views/layouts/ and insert the calls from the template directive into a template parameter called content.</p></li>
<li><p>The &ldquo;before_template_render&rdquo; provides a way to manipulate the template parameters before they&rsquo;re passed to the engine for processing.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
