<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Catalyst | Steven Sun's Blog]]></title>
  <link href="http://shpeacelover.github.io/blog/categories/catalyst/atom.xml" rel="self"/>
  <link href="http://shpeacelover.github.io/"/>
  <updated>2014-01-21T20:16:19+08:00</updated>
  <id>http://shpeacelover.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Catalyst Manual Tutorial Notes]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/14/catalyst-manual-tutorial-notes/"/>
    <updated>2014-01-14T17:01:10+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/14/catalyst-manual-tutorial-notes</id>
    <content type="html"><![CDATA[<ol>
<li><p>Make sure when adding new plugins you also include them as a new dependency within the Makefile.PL file.</p></li>
<li><p>When specifying plugins, you can omit Catalyst::Plugin:: from the name.</p></li>
<li><p>You should refer to &ldquo;Action-types&rdquo; in Catalyst::Manual::Intro for additional information and for coverage of some lesser-used action types not discussed here (Regex and LocalRegex).</p></li>
<li><p>Although DBIx::Class has included support for a create=dynamic mode to automatically read the database structure every time the application starts, its use is no longer recommended.</p></li>
<li><p>lib/MyApp contains a Schema subdirectory, which then has a subdirectory called &ldquo;Result&rdquo;. This &ldquo;Result&rdquo; subdirectory then has files named according to each of the tables in our simple database (Author.pm, BookAuthor.pm, and Book.pm). These three files are called &ldquo;Result Classes&rdquo; (or &ldquo;ResultSource Classes&rdquo;) in DBIx::Class nomenclature. Although the Result Class files are named after tables in our database, the classes correspond to the row-level data that is returned by DBIC.</p></li>
<li><p>Also note the &ldquo;flow&rdquo; of the model information across the various files and directories. Catalyst will initially load the model from lib/MyApp/Model/DB.pm. This file contains a reference to lib/MyApp/Schema.pm, so that file is loaded next. Finally, the call to load_namespaces in Schema.pm will load each of the &ldquo;Result Class&rdquo; files from the lib/MyApp/Schema/Result subdirectory. The final outcome is that Catalyst will dynamically create three table-specific Catalyst models every time the application starts (you can see these three model files listed in the debug output generated when you launch the application).</p></li>
<li><p>The Catalyst stash only lasts for a single HTTP request. If you need to retain information across requests you can use Catalyst::Plugin::Session.</p></li>
<li><p>You cannot define a many_to_many relationship bridge without also having the has_many relationship in place.</p></li>
<li><p>At the end of a given user request, Catalyst will call the most specific end method that&rsquo;s appropriate. For example, if the controller for a request has an end method defined, it will be called. However, if the controller does not define a controller-specific end method, the &ldquo;global&rdquo; end method in Root.pm will be called.</p></li>
<li><p>Catalyst takes &ldquo;extra slash-separated information&rdquo; from the URL and passes it as arguments in @_ (as long as the number of arguments is not &ldquo;fixed&rdquo; using an attribute like :Args(0)).</p></li>
<li><p>Chaining lets you have a single URL automatically dispatch to several controller methods, each of which can have precise control over the number of arguments that it will receive.  A chain can essentially be thought of having three parts &mdash; a beginning, a middle, and an end.</p></li>
<li><p>In practice you should never use a GET request to delete a record &mdash; always use POST for actions that will modify data.</p></li>
<li><p>There are several ways to pass information across a redirect. One option is to use the flash technique.</p></li>
<li><p>It is generally recommended (partly for historical reasons, and partly for code clarity) only to use default in MyApp::Controller::Root, and then mainly to generate the 404 not found page for the application.</p></li>
<li><p>Flash allows you to set variables in a way that is very similar to stash, but it will remain set across multiple requests. Once the value is read, it is cleared (unless reset).</p></li>
<li><p>If you want to keep your existing method, you can create a new copy and comment out the original by making it look like a Pod comment. For example, put something like =begin before sub add : Local { and =end after the closing }.</p></li>
<li><p>For debugging techniques in Catalyst, please visit the page &ldquo;<a href="https://metacpan.org/pod/Catalyst::Manual::Tutorial::07_Debugging">https://metacpan.org/pod/Catalyst::Manual::Tutorial::07_Debugging</a>&rdquo;. We can also find information about how to &ldquo;Check the version of an installed module&rdquo; and how to &ldquo;Check if a modules contains a given method&rdquo;.</p></li>
<li><p>If you want to use MySQL or postgresql in catalyst, please refer to the following url, &ldquo;<a href="https://metacpan.org/pod/Catalyst::Manual::Tutorial::10_Appendices">https://metacpan.org/pod/Catalyst::Manual::Tutorial::10_Appendices</a>&rdquo;.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst 5.8 the Perl MVC Framework Notes--Creating a Database Model]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes-creating-a-database-model/"/>
    <updated>2014-01-11T16:24:03+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes-creating-a-database-model</id>
    <content type="html"><![CDATA[<ol>
<li><p>The command for creating a database model is as the following: <br/>
<code>
perl script/myapp_create.pl model TestDatabase DBIC::Schema MyApp::Schema::TestDatabase create=dynamic dbi:SQLite:tmp/database
</code></p></li>
<li><p>The first argument is the name of the Catalyst Model (TestDatabase). DBIC::Schema is what sort of model we&rsquo;re creating. MyApp::Schema::TestDatabase is where the schema definition will be stored (we won&rsquo;t use the Schema in this example, but real applications will). create=dynamic tells DBIC to read the database every time theapplication is started to determine the schema (layout of tables, foreign key relations, and so on.). The final argument is the DBI connect string for the database.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst 5.8 the Perl MVC Framework Notes]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes/"/>
    <updated>2014-01-11T12:33:25+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes</id>
    <content type="html"><![CDATA[<ol>
<li><p>catalyst.pl MyApp    (this command will create the app)</p></li>
<li><p>Inside the lib directory, there is a file named MyApp.pm, This file defines the namespace and inheritance that are necessary to make this a Catalyst application. It also contains the list of plugins to load application-­specific configurations. These configurations can also be defined in the myapp.conf file in the MyApp directory. However, if the same configuration is mentioned in both the files, then the configuration mentioned here takes precedence.</p></li>
<li>The file lib/MyApp/Controller/Root.pm will handle all root level (/)URLs. This is where the code that generates the welcome page is located.</li>
<li>The root directory will hold your templates and other non-­code support files. A subdirectory called /root/static is for static content such as images and stylesheets. Catalyst is set up to serve static files from this directory automatically (under the /static path), thanks toCatalyst::Plugin::Static::Simple.</li>
<li>The script directory contains the scripts needed to run, test, and modify your application. To note here, the script myapp_create.pl, which is a version of catalyst.pl that&rsquo;s customized for your application. It can create Models, Views, Controllers, tests, and many other things.</li>
<li><p>The t directory is where your application&rsquo;s automatic tests are stored. By default, you&rsquo;ll have the following three tests:</p>

<ul>
<li>01app.t, which is a test that passes if your application compiles.</li>
<li>02pod.t, which will pass if your Plain Old Documentation (POD)embedded API documentation, inside your application, is valid.</li>
<li>03podcoverage.t, which tests that every public function in your application has some documentation.</li>
</ul>
</li>
<li><p>When a user makes a request using the browser, Catalyst will look for the appropriate method that can handle the request within packages called Controllers.</p></li>
<li><p>In a controller, there are some automatically created stuff. &ldquo;BEGIN {extends &lsquo;Catalyst::Controller&rsquo;; }&rdquo; is to tell Moose/Perl that this module is a Catalyst Controller. &ldquo;<strong>PACKAGE</strong>&ndash;>meta->make_immutable&rdquo; ells Moose that this module will not change at runtime. This statement is necessary for performance gains and is good practice to mention in every Moose module. Modules must return true when they&rsquo;re loaded,otherwise Perl will assume that the loading has failed and will die with an error message. 1 is always true, so it&rsquo;s conventional to use it for this purpose.</p></li>
<li>To create a view, we can issue the following command, &lsquo;perl script/myapp_create.pl view TT TT&rsquo;. The TT TT part of the previous command means to create a View called View/TT.pm (the first TT) based on the standard Catalyst::View::TT (the second TT).  For our example, The next step is to create a template in the root/hello directory.We will name it index.tt. The root directory is the default place where Catalyst::View::TT will look for templates. This can be changed by configuration if you really need to.</li>
<li>Variables that are passed between Controllers and Views are called stash.</li>
<li>For the &ldquo;sub index&rdquo; part in a controller, if we change it to &ldquo;sub index :Path :Args(1)&rdquo;, it will accept the argument after index. The :Path attribute after index tells Catalyst that this method will handle URL requests that do not mention the method name such as /hello. The Args(1) attribute declares that this action expects one argument.</li>
<li>If we specified :Local instead of :Path, then Catalyst would map the index action to handle a URL that looks like /hello/index. So, the URL looks like the following <a href="http://localhost/hello/index/Bonjour!,">http://localhost/hello/index/Bonjour!,</a> where Bonjour! is the argument that is being passed to the Controller. If we omitted the attributes (:Local, :Path, and so on), Catalyst would ignore the action entirely and it would be a normal Perl subroutine in the package. If we want to handle any URL with this method, then we can use the :Global attribute.</li>
<li><p>We also changed the first line of the hello subroutine to receive the parameter within the method. Initially, it looked like  <br/>
my ( $self, $c ) = @<em>;.  <br/>
This gets the first two arguments passed to the action by Catalyst, $self and $c. $self is a MyApp::Controller::Hello object and is not of much use right now. $c is the Catalyst context and contains all the information about our application and the current request (and therefore is very useful). Catalyst passes more than just $self and$c though, so we want to modify that line to read
my ($self, $c, @args)=@</em>;.
This will allow us to access the rest of the arguments via the @args array.</p></li>
<li><p>The template that will be rendered is determined by the private name of your action.</p></li>
<li><p>The stash is a data structure that exists throughout a single Catalyst request. Data you insert into the stash in an action will be available to the View (and other actions). Templates can only access variables that have been explicitly placed here, so it&rsquo;s important to remember to put your useful data in the stash (otherwise it will be gone at the end of the subroutine in the Controller, instead of at the end of the request).</p></li>
<li><p>You can automatically restart the server when necessary by running the server like     <br/>
perl script/myapp_server.pl -r -d.  <br/>
The -r will cause the server to restart when appropriate, and the -d will show debugging information, even if you&rsquo;ve turned it off inside your application. This is especially useful as you will want to deactivate the hardcoded -Debug option in your MyApp.pm, once you are ready to deploy your application.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
