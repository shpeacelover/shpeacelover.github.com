<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Steven Sun's Blog]]></title>
  <link href="http://shpeacelover.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://shpeacelover.github.io/"/>
  <updated>2014-02-21T20:12:42+08:00</updated>
  <id>http://shpeacelover.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes on Effective Perl Programming 3]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/24/notes-on-effective-perl-programming-3/"/>
    <updated>2014-01-24T21:32:57+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/24/notes-on-effective-perl-programming-3</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Effective Perl Programming 2]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/24/notes-on-effective-perl-programming-2/"/>
    <updated>2014-01-24T17:09:35+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/24/notes-on-effective-perl-programming-2</id>
    <content type="html"><![CDATA[<ol>
<li>循环while的条件语句是标量上下文环境， 而foreach的条件语句则是列表上下文环境。</li>
<li>当我们调用某个子程序或使用某个操作符时， 没有提供保存或使用其返回结果的目标时， 就是空上下文（void context）。</li>
<li>在子程序中， shift 操作会默认用@_作为参数。 在子程序之外， shift会把@ARGV作为默认参数。</li>
<li>在标量上下文中， grep返回符合条件的元素个数， 而不是元素列表。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Effective Perl Programming]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/23/notes-on-effective-perl-programming/"/>
    <updated>2014-01-23T19:47:56+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/23/notes-on-effective-perl-programming</id>
    <content type="html"><![CDATA[<ol>
<li><p>如果担心原先的程序启用strict后运行不正常， 则可以在实际修改代码前， 先在命令行上试着启用strict看看：  <br/>
<code>
perl -Mstrict program.pl
</code></p></li>
<li><p>所谓列表， 就是一组有序的标量集合。 所谓数组， 就是一个存储着列表的变量. 对于数组， 我们可以将它放在标量上下文中计算， 但对于列表， 则没有相应的概念。而列表永远只是列表， 它没有标量解释。</p></li>
<li><p>逗号操作符在标量上下文中会返回最右边的元素。  所以 my $scalar = (&lsquo;aa&rsquo;, &lsquo;bb&rsquo;, &lsquo;cc&rsquo;) 会将cc赋给$scalar.</p></li>
<li><p>在标量上下文环境中的列表赋值操作， 会返回负值操作符右边的元素个数。</p></li>
<li><p>my $elements = my @array = localtime; 使用这种方法可以计算下某个操作生成的列表中有几个元素。 由于这个规则是右结合的， 所以实际上中间被赋值的列表可以是空列表： <br/>
my $elements = () = local time;  如果要统计全局匹配的个数， 或者split函数返回的结果有多少个元素， 可以利用这个特性。</p></li>
</ol>


<p>```
my $count = () = m/(&hellip;)/g;</p>

<p>my $count = () = split /:/, $line;</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Perl]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/09/notes-on-perl/"/>
    <updated>2014-01-09T21:41:24+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/09/notes-on-perl</id>
    <content type="html"><![CDATA[<ol>
<li>为了查看某一个模块的版本号， 在命令行下输入以下的内容： <br/>
perl -MSome::Module -e &lsquo;print Some::Module->VERSION&rsquo;</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Can We Omit the Ampersand While Calling a Subroutine]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/07/when-can-we-omit-the-ampersand-while-calling-a-subroutine/"/>
    <updated>2014-01-07T16:39:30+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/07/when-can-we-omit-the-ampersand-while-calling-a-subroutine</id>
    <content type="html"><![CDATA[<p>If the compiler sees the subroutine definition before invocation, or if Perl can tell from the syntax that it’s a subroutine call, the subroutine can be called without an ampersand, just like a built-in function.</p>
]]></content>
  </entry>
  
</feed>
