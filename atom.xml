<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Sun's Blog]]></title>
  <link href="http://shpeacelover.github.io/atom.xml" rel="self"/>
  <link href="http://shpeacelover.github.io/"/>
  <updated>2014-01-20T19:09:40+08:00</updated>
  <id>http://shpeacelover.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yaml Exception Reading Errors]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/15/yaml-exception-reading-errors/"/>
    <updated>2014-01-15T20:50:41+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/15/yaml-exception-reading-errors</id>
    <content type="html"><![CDATA[<p>When I use the &ldquo;rake generate&rdquo; command, sometimes I will get this error like, &ldquo;YAML Exception reading&rdquo;. We can solve this problem by following the method below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export LC_ALL=en_US.UTF-8    
</span><span class='line'>export LANG=en_US.UTF-8
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst Manual Tutorial Notes]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/14/catalyst-manual-tutorial-notes/"/>
    <updated>2014-01-14T17:01:10+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/14/catalyst-manual-tutorial-notes</id>
    <content type="html"><![CDATA[<ol>
<li><p>Make sure when adding new plugins you also include them as a new dependency within the Makefile.PL file.</p></li>
<li><p>When specifying plugins, you can omit Catalyst::Plugin:: from the name.</p></li>
<li><p>You should refer to &ldquo;Action-types&rdquo; in Catalyst::Manual::Intro for additional information and for coverage of some lesser-used action types not discussed here (Regex and LocalRegex).</p></li>
<li><p>Although DBIx::Class has included support for a create=dynamic mode to automatically read the database structure every time the application starts, its use is no longer recommended.</p></li>
<li><p>lib/MyApp contains a Schema subdirectory, which then has a subdirectory called &ldquo;Result&rdquo;. This &ldquo;Result&rdquo; subdirectory then has files named according to each of the tables in our simple database (Author.pm, BookAuthor.pm, and Book.pm). These three files are called &ldquo;Result Classes&rdquo; (or &ldquo;ResultSource Classes&rdquo;) in DBIx::Class nomenclature. Although the Result Class files are named after tables in our database, the classes correspond to the row-level data that is returned by DBIC.</p></li>
<li><p>Also note the &ldquo;flow&rdquo; of the model information across the various files and directories. Catalyst will initially load the model from lib/MyApp/Model/DB.pm. This file contains a reference to lib/MyApp/Schema.pm, so that file is loaded next. Finally, the call to load_namespaces in Schema.pm will load each of the &ldquo;Result Class&rdquo; files from the lib/MyApp/Schema/Result subdirectory. The final outcome is that Catalyst will dynamically create three table-specific Catalyst models every time the application starts (you can see these three model files listed in the debug output generated when you launch the application).</p></li>
<li><p>The Catalyst stash only lasts for a single HTTP request. If you need to retain information across requests you can use Catalyst::Plugin::Session.</p></li>
<li><p>You cannot define a many_to_many relationship bridge without also having the has_many relationship in place.</p></li>
<li><p>At the end of a given user request, Catalyst will call the most specific end method that&rsquo;s appropriate. For example, if the controller for a request has an end method defined, it will be called. However, if the controller does not define a controller-specific end method, the &ldquo;global&rdquo; end method in Root.pm will be called.</p></li>
<li><p>Catalyst takes &ldquo;extra slash-separated information&rdquo; from the URL and passes it as arguments in @_ (as long as the number of arguments is not &ldquo;fixed&rdquo; using an attribute like :Args(0)).</p></li>
<li><p>Chaining lets you have a single URL automatically dispatch to several controller methods, each of which can have precise control over the number of arguments that it will receive.  A chain can essentially be thought of having three parts &mdash; a beginning, a middle, and an end.</p></li>
<li><p>In practice you should never use a GET request to delete a record &mdash; always use POST for actions that will modify data.</p></li>
<li><p>There are several ways to pass information across a redirect. One option is to use the flash technique.</p></li>
<li><p>It is generally recommended (partly for historical reasons, and partly for code clarity) only to use default in MyApp::Controller::Root, and then mainly to generate the 404 not found page for the application.</p></li>
<li><p>Flash allows you to set variables in a way that is very similar to stash, but it will remain set across multiple requests. Once the value is read, it is cleared (unless reset).</p></li>
<li><p>If you want to keep your existing method, you can create a new copy and comment out the original by making it look like a Pod comment. For example, put something like =begin before sub add : Local { and =end after the closing }.</p></li>
<li><p>For debugging techniques in Catalyst, please visit the page &ldquo;<a href="https://metacpan.org/pod/Catalyst::Manual::Tutorial::07_Debugging">https://metacpan.org/pod/Catalyst::Manual::Tutorial::07_Debugging</a>&rdquo;. We can also find information about how to &ldquo;Check the version of an installed module&rdquo; and how to &ldquo;Check if a modules contains a given method&rdquo;.</p></li>
<li><p>If you want to use MySQL or postgresql in catalyst, please refer to the following url, &ldquo;<a href="https://metacpan.org/pod/Catalyst::Manual::Tutorial::10_Appendices">https://metacpan.org/pod/Catalyst::Manual::Tutorial::10_Appendices</a>&rdquo;.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst 5.8 the Perl MVC Framework Notes--Creating a Database Model]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes-creating-a-database-model/"/>
    <updated>2014-01-11T16:24:03+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes-creating-a-database-model</id>
    <content type="html"><![CDATA[<ol>
<li>The command for creating a database model is as the following:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>perl script/myapp_create.pl model TestDatabase DBIC::Schema MyApp::Schema::TestDatabase create=dynamic dbi:SQLite:tmp/database</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li>The first argument is the name of the Catalyst Model (TestDatabase). DBIC::Schema is what sort of model we&rsquo;re creating. MyApp::Schema::TestDatabase is where the schema definition will be stored (we won&rsquo;t use the Schema in this example, but real applications will). create=dynamic tells DBIC to read the database every time theapplication is started to determine the schema (layout of tables, foreign key relations, and so on.). The final argument is the DBI connect string for the database.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst 5.8 the Perl MVC Framework Notes]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes/"/>
    <updated>2014-01-11T12:33:25+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/11/catalyst-5-dot-8-the-perl-mvc-framework-notes</id>
    <content type="html"><![CDATA[<ol>
<li><p>catalyst.pl MyApp    (this command will create the app)</p></li>
<li><p>Inside the lib directory, there is a file named MyApp.pm, This file defines the namespace and inheritance that are necessary to make this a Catalyst application. It also contains the list of plugins to load application-­specific configurations. These configurations can also be defined in the myapp.conf file in the MyApp directory. However, if the same configuration is mentioned in both the files, then the configuration mentioned here takes precedence.</p></li>
<li>The file lib/MyApp/Controller/Root.pm will handle all root level (/)URLs. This is where the code that generates the welcome page is located.</li>
<li>The root directory will hold your templates and other non-­code support files. A subdirectory called /root/static is for static content such as images and stylesheets. Catalyst is set up to serve static files from this directory automatically (under the /static path), thanks toCatalyst::Plugin::Static::Simple.</li>
<li>The script directory contains the scripts needed to run, test, and modify your application. To note here, the script myapp_create.pl, which is a version of catalyst.pl that&rsquo;s customized for your application. It can create Models, Views, Controllers, tests, and many other things.</li>
<li><p>The t directory is where your application&rsquo;s automatic tests are stored. By default, you&rsquo;ll have the following three tests:</p>

<ul>
<li>01app.t, which is a test that passes if your application compiles.</li>
<li>02pod.t, which will pass if your Plain Old Documentation (POD)embedded API documentation, inside your application, is valid.</li>
<li>03podcoverage.t, which tests that every public function in your application has some documentation.</li>
</ul>
</li>
<li><p>When a user makes a request using the browser, Catalyst will look for the appropriate method that can handle the request within packages called Controllers.</p></li>
<li><p>In a controller, there are some automatically created stuff. &ldquo;BEGIN {extends &lsquo;Catalyst::Controller&rsquo;; }&rdquo; is to tell Moose/Perl that this module is a Catalyst Controller. &ldquo;<strong>PACKAGE</strong>&ndash;>meta->make_immutable&rdquo; ells Moose that this module will not change at runtime. This statement is necessary for performance gains and is good practice to mention in every Moose module. Modules must return true when they&rsquo;re loaded,otherwise Perl will assume that the loading has failed and will die with an error message. 1 is always true, so it&rsquo;s conventional to use it for this purpose.</p></li>
<li>To create a view, we can issue the following command, &lsquo;perl script/myapp_create.pl view TT TT&rsquo;. The TT TT part of the previous command means to create a View called View/TT.pm (the first TT) based on the standard Catalyst::View::TT (the second TT).  For our example, The next step is to create a template in the root/hello directory.We will name it index.tt. The root directory is the default place where Catalyst::View::TT will look for templates. This can be changed by configuration if you really need to.</li>
<li>Variables that are passed between Controllers and Views are called stash.</li>
<li>For the &ldquo;sub index&rdquo; part in a controller, if we change it to &ldquo;sub index :Path :Args(1)&rdquo;, it will accept the argument after index. The :Path attribute after index tells Catalyst that this method will handle URL requests that do not mention the method name such as /hello. The Args(1) attribute declares that this action expects one argument.</li>
<li>If we specified :Local instead of :Path, then Catalyst would map the index action to handle a URL that looks like /hello/index. So, the URL looks like the following <a href="http://localhost/hello/index/Bonjour!,">http://localhost/hello/index/Bonjour!,</a> where Bonjour! is the argument that is being passed to the Controller. If we omitted the attributes (:Local, :Path, and so on), Catalyst would ignore the action entirely and it would be a normal Perl subroutine in the package. If we want to handle any URL with this method, then we can use the :Global attribute.</li>
<li><p>We also changed the first line of the hello subroutine to receive the parameter within the method. Initially, it looked like  <br/>
my ( $self, $c ) = @<em>;.  <br/>
This gets the first two arguments passed to the action by Catalyst, $self and $c. $self is a MyApp::Controller::Hello object and is not of much use right now. $c is the Catalyst context and contains all the information about our application and the current request (and therefore is very useful). Catalyst passes more than just $self and$c though, so we want to modify that line to read
my ($self, $c, @args)=@</em>;.
This will allow us to access the rest of the arguments via the @args array.</p></li>
<li><p>The template that will be rendered is determined by the private name of your action.</p></li>
<li><p>The stash is a data structure that exists throughout a single Catalyst request. Data you insert into the stash in an action will be available to the View (and other actions). Templates can only access variables that have been explicitly placed here, so it&rsquo;s important to remember to put your useful data in the stash (otherwise it will be gone at the end of the subroutine in the Controller, instead of at the end of the request).</p></li>
<li><p>You can automatically restart the server when necessary by running the server like     <br/>
perl script/myapp_server.pl -r -d.  <br/>
The -r will cause the server to restart when appropriate, and the -d will show debugging information, even if you&rsquo;ve turned it off inside your application. This is especially useful as you will want to deactivate the hardcoded -Debug option in your MyApp.pm, once you are ready to deploy your application.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on Perl]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/09/notes-on-perl/"/>
    <updated>2014-01-09T21:41:24+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/09/notes-on-perl</id>
    <content type="html"><![CDATA[<ol>
<li>为了查看某一个模块的版本号， 在命令行下输入以下的内容： <br/>
perl -MSome::Module -e &lsquo;print Some::Module->VERSION&rsquo;</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Year's Resolution]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/09/new-year-resolution/"/>
    <updated>2014-01-09T20:33:07+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/09/new-year-resolution</id>
    <content type="html"><![CDATA[<p>好久没有对未来做些规划了。 总觉得日子就这样过吧。 也懒得去做些什么大的改变了。</p>

<p>总是在各种技术间跳来跳去， 没有熟练任何一种技术。 玩过Perl， Python， Ruby， Shell Script， PHP， Lisp。 但是真正在公司的服务器上部署过的代码只有用PHP还有Shell Script写的代码。</p>

<p>在我刚来公司的时候， 是想从事perl的代码的编写的工作。 但是自从进入公司后， 自己在Perl上花的时间实在是微乎其微的。</p>

<p>以至于自己都有点迷失方向了， 不知道该给自己立下什么目标。</p>

<p>在自己入职刚一年的时候， manager跟我说， 以后或许可以从事L2方面的工作， 即专职从事代码编写的工作， 当然也得写rule。 前提肯定是自己能证明有能力去做这件事情了。虽然现在自己也有大把的时候可以进行coding， 但是毕竟还是L1. 自己负责的那些PHP代码只有偶尔需要改动。</p>

<p>学了好几天的Catalyst了。 现在我要下定决心把Perl的两个框架给学好， 一个是Catalyst， 一个是Dancer。 这两个框架公司里都有用到的。但是感觉挺难的， 而我的那个L1的同事竟然说Dancer挺容易的。 我是有多蠢啊！！！！</p>

<p>2014年， 希望自己在工作上能够有如下的进步。
1. 在Perl上能稍微有点成绩。 毕竟从知道有perl这门语言到现在都已经有两年多了。 现在还是这么菜的水平， 完全说不过去的。
2. 彻底掌握Catalyst还有Dancer这两个框架。
3. 对于PHP， 因为基本上公司用的框架就在那里了， 希望在新的一年里能够在扎实下PHP代码编写的技巧。
4. 入职满两年的时候希望能够有底气跟manager说我想转到L2去。
5. 每天写技术博客， 或长或短， 记录下每天学到什么新的技术。 那样或许长进会更快点的。
6. 有不懂的刻苦钻研或者向同事请教。</p>

<p>好吧， 就写这么多了。 希望能好好审视下自己今天写下的这些东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Can We Omit the Ampersand While Calling a Subroutine]]></title>
    <link href="http://shpeacelover.github.io/blog/2014/01/07/when-can-we-omit-the-ampersand-while-calling-a-subroutine/"/>
    <updated>2014-01-07T16:39:30+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2014/01/07/when-can-we-omit-the-ampersand-while-calling-a-subroutine</id>
    <content type="html"><![CDATA[<p>If the compiler sees the subroutine definition before invocation, or if Perl can tell from the syntax that it’s a subroutine call, the subroutine can be called without an ampersand, just like a built-in function.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Useful Macos Commands]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/09/07/some-useful-macos-commands/"/>
    <updated>2013-09-07T19:51:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/09/07/some-useful-macos-commands</id>
    <content type="html"><![CDATA[<ol>
<li><p>在iterm2里， 输入“open -a Mou”打开Mou编辑器， 输入open example.md or open -a Mou example.md来打开一个文件。</p></li>
<li><p>在iterm2里， 按住cmd+enter， 将会将iterm2最大化。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎可妄想]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/09/05/zen-ke-wang-xiang/"/>
    <updated>2013-09-05T11:12:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/09/05/zen-ke-wang-xiang</id>
    <content type="html"><![CDATA[<p>一个人不成熟的标志， 或许就是， 有的东西明知不属于自己， 却还痴心妄想， 可笑， 可悲， 可叹.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奇技淫巧之vim匹配括号]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/09/04/qi-ji-yin-qiao-zhi-vimpi-pei-gua-hao/"/>
    <updated>2013-09-04T10:52:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/09/04/qi-ji-yin-qiao-zhi-vimpi-pei-gua-hao</id>
    <content type="html"><![CDATA[<p>今日在和同事交接代码的时候， 因为代码比较长， 所以出现了在看到一个括号的时候， 不知道与它匹配的括号在哪里。 当时使用的是vim， 后来换成了sublime text， 但是还是不知道怎么去找括号的另一半。现在我们就来看看， 怎么在vim中去匹配括号的另一半。</p>

<p>首先把光标定位在一个括号上，在normal模式中, 按shift+5, 亦即%来自动调转到另一个括号上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Vim --chap04 Visual Mode]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/28/practical-vim-chap04-visual-mode/"/>
    <updated>2013-08-28T15:38:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/28/practical-vim-chap04-visual-mode</id>
    <content type="html"><![CDATA[<ol>
<li><p>Vim’s Visual mode allows us to define a selection of text and then operate upon it.</p></li>
<li><p>ways to enabling visual modes:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>v Enable character-wise Visual mode
</span><span class='line'>V Enable line-wise Visual mode
</span><span class='line'>&lt;C-v&gt; Enable block-wise Visual mode
</span><span class='line'>gv Reselect the last visual selection</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>the &lsquo;gv&rsquo; command isreselects the range of text that was last selected in Visual mode. No matter whether the previous selection was character-wise, line-wise, or block-wise, the gv command should do the right thing. The only case where it might get confused is if the last selection has since been deleted.</p></li>
<li><p>if there is a html tag, like &ldquo;<a href="#">three</a>&rdquo;, type vit in normal mode, will get you put your cursor into the &lsquo;h&rsquo; character of the word &ldquo;three&rdquo;. vit means &ldquo;visually select inside the tag&rdquo;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Vim --chap02 Normal Mode]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/28/practical-vim-chap02-normal-mode/"/>
    <updated>2013-08-28T14:43:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/28/practical-vim-chap02-normal-mode</id>
    <content type="html"><![CDATA[<ol>
<li><p>if there is a line and it is in normal mode, like &ldquo;hello, everyone, this is steven sun&rdquo;. now if you position your cursor on the &ldquo;s&rdquo; of &ldquo;steven sun&rdquo; and then type &ldquo;c2w&rdquo;, you will enter into the &ldquo;insert mode&rdquo; and will be prompted to enter some text.</p></li>
<li><p>use dap to delete a paragraph, use daw to  delete a  word, use dal to delete a  single character;</p></li>
<li><p>we can type :h operator to find those information about operators in vim.</p></li>
<li><p>an action is composed from an operator followed by a motion.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network and Protocol Functions in PHP]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/28/network-and-protocol-functions-in-php/"/>
    <updated>2013-08-28T14:08:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/28/network-and-protocol-functions-in-php</id>
    <content type="html"><![CDATA[<ol>
<li><p>file_get_contents($url);</p></li>
<li><p>urlencode() function.This function takes a string and converts it to the proper format for an URL</p></li>
<li><p>parse_url($url)</p></li>
<li><p>gethostbyname</p></li>
<li><p>ftp_fget</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[忧郁的心情]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/24/you-yu-de-xin-qing/"/>
    <updated>2013-08-24T18:46:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/24/you-yu-de-xin-qing</id>
    <content type="html"><![CDATA[<p>忧郁， 毫无斗志。怎么好像每周都有那么会儿啊！要自强不息啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oop in PHP]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/23/oop-in-php/"/>
    <updated>2013-08-23T20:47:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/23/oop-in-php</id>
    <content type="html"><![CDATA[<p>1.&nbsp;define a class with function and parameters</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class classname
</span><span class='line'>    {
</span><span class='line'>    function operation1()
</span><span class='line'>    {
</span><span class='line'>    }
</span><span class='line'>    function operation2($param1, $param2)
</span><span class='line'>    {
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>2.&nbsp;constructor</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class classname
</span><span class='line'>{
</span><span class='line'>  function __construct($param)
</span><span class='line'>  {
</span><span class='line'>    echo "Constructor called with parameter ".$param."&lt;br /&gt;";
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>$a = new classname("First");
</span><span class='line'>$b = new classname("Second");
</span><span class='line'>$c = new classname();
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>3.&nbsp;class attribute</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class classname
</span><span class='line'>{
</span><span class='line'>public $attribute;
</span><span class='line'>}
</span><span class='line'>$a = new classname();
</span><span class='line'>$a-&gt;attribute = "value";
</span><span class='line'>echo $a-&gt;attribute;</span></code></pre></td></tr></table></div></figure>


<p>4.&nbsp; When you use this keyword &ldquo;final&rdquo; in front of a function declaration, that function cannot be overridden in any subclasses</p>

<p>5.&nbsp; PHP use &ldquo;interface&rdquo; to implement the function of &ldquo;multi inheritance&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>interface Displayable
</span><span class='line'>{
</span><span class='line'>    function display();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>class webPage implements Displayable
</span><span class='line'>{
</span><span class='line'>    function display()
</span><span class='line'>{
</span><span class='line'>// ...
</span><span class='line'>}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Random Notes About Life and Work]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/21/some-random-notes-about-life-and-work/"/>
    <updated>2013-08-21T10:51:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/21/some-random-notes-about-life-and-work</id>
    <content type="html"><![CDATA[<p>Spent a lot of time last night and this morning to midify the theme of my blog to make it looks better without success.
What a shame!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text Encoding and Transformation in PHP]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/19/text-encoding-and-transformation-in-php/"/>
    <updated>2013-08-19T19:36:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/19/text-encoding-and-transformation-in-php</id>
    <content type="html"><![CDATA[<p>GET: urlencode/rawurlencode</p>

<p>links: htmlspecialchars</p>

<p>SQL: addslashes/stripslashes</p>

<p>HTML: htmlentities, strip_tags, nl2br;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Vim Command Tips]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/17/useful-vim-command-tips/"/>
    <updated>2013-08-17T14:50:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/17/useful-vim-command-tips</id>
    <content type="html"><![CDATA[<p>ctrl+w+(w, h, j, k,l)</p>

<p>ctrl+b,</p>

<p>ctrl+w,</p>

<p>gg&nbsp;&nbsp;移到整份文件的最上方</p>

<p>G&nbsp;&nbsp;移到整份文件的最下方</p>

<p>H&nbsp;&nbsp;移动到当前屏幕的最上方</p>

<p>L&nbsp;&nbsp;移动到当前屏幕的最下方</p>

<p>ds&#8221;&nbsp;&nbsp;删除周围的双引号</p>

<p>cst&nbsp;&nbsp;删除周围的tag</p>

<p>yss&#8221;&nbsp;&nbsp;把整行加上双引号</p>

<p>:new&nbsp;&nbsp;建立水平视窗</p>

<p>:vnew&nbsp;&nbsp;建立垂直视窗</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样把 Github上 的 Octopress Clone 到本地以及发布博客]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/05/zen-yang-ba-githubshang-de-octopress-clone-dao-ben-di-yi-ji-fa-bu-bo-ke/"/>
    <updated>2013-08-05T17:41:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/05/zen-yang-ba-githubshang-de-octopress-clone-dao-ben-di-yi-ji-fa-bu-bo-ke</id>
    <content type="html"><![CDATA[<p>力求精简， 步骤如下：
1. git clone -b source <a href="https://github.com/shpeacelover/shpeacelover.github.com">https://github.com/shpeacelover/shpeacelover.github.com</a> octopress
2. cd octopress
3. git clone <a href="https://github.com/shpeacelover/shpeacelover.github.com">https://github.com/shpeacelover/shpeacelover.github.com</a> _deploy
4. sudo gem install bundler
5. bundle install
6. rake new_post[&ldquo;The Title of Your Article&rdquo;]
7. bundle exec rake generate
8. bundle exec rake preview
9. bundle exec rake deploy
10. git add .
11. git commit -m &lsquo;your comment&rsquo;
12. git push origin source</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[反省]]></title>
    <link href="http://shpeacelover.github.io/blog/2013/08/05/fan-sheng/"/>
    <updated>2013-08-05T17:27:00+08:00</updated>
    <id>http://shpeacelover.github.io/blog/2013/08/05/fan-sheng</id>
    <content type="html"><![CDATA[<p>之前在学Django的时候， 觉得挺难的， 并不像网络上有的人所说的那样的简单。结果是没有坚持下来。</p>

<p>现在在学Ruby还有Ruby On Rails，觉得愈加的难了。 毕竟自己之前对于Python以及Django的了解要多于对Ruby和Rails的了解。</p>

<p>虽然如此， 但是自己也已经啃了这些硬骨头有段日子了。 虽然很多东西仍然不甚了解， 但是如果不坚持下去， 就会又是只知道个皮毛。 那就又等于浪费了很多宝贵的时间去做无用功了。</p>

<p>告诉自己，必须坚持下去， 多思考，多看书， 多编程。 会有结果的。</p>
]]></content>
  </entry>
  
</feed>
